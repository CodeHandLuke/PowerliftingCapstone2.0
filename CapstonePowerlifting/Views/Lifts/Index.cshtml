@model IEnumerable<CapstonePowerlifting.Models.Lift>

@{
	ViewBag.Title = "Index";
}

<h2>My Workout</h2>

<p>
	@Html.ActionLink("Create New", "Create")
</p>
<table class="table">
	<tr>
		@*<th>
				@Html.DisplayNameFor(model => model.User.FirstName)
			</th>*@
		<th>
			@Html.DisplayNameFor(model => model.SetOrder)
		</th>
		@*<th>
				@Html.DisplayNameFor(model => model.WorkoutId)
			</th>*@
		<th>
			@Html.DisplayNameFor(model => model.Exercise)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.OneRMPercentage)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Reps)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Weight)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Completed)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Notes)
		</th>
		@*<th>
				@Html.DisplayNameFor(model => model.NoteText)
			</th>*@
		<th></th>
	</tr>

	@foreach (var item in Model)
	{
		<tr>
			@*<td>
					@Html.DisplayFor(modelItem => item.User.FirstName)
				</td>*@
			<td>
				@Html.DisplayFor(modelItem => item.SetOrder)
			</td>
			@*<td>
					@Html.DisplayFor(modelItem => item.WorkoutId)
				</td>*@
			<td>
				@Html.DisplayFor(modelItem => item.Exercise)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.OneRMPercentage)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Reps)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Weight)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Completed)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Notes)
			</td>
			@*<td>
					@Html.DisplayFor(modelItem => item.NoteText)
				</td>*@
			<td>
				@Html.ActionLink("Edit", "Edit", new { id = item.ProgramId })
				@*@Html.ActionLink("Details", "Details", new { id=item.ProgramId }) |
					@Html.ActionLink("Delete", "Delete", new { id=item.ProgramId })*@
			</td>
		</tr>
	}

</table>

<div>@Html.ActionLink("CompleteAllReps", "CompleteAllReps")</div>
<div><input type="button" value="Complete Workout" onclick="location.href='@Url.Action("CompleteWorkout", "Lifts")'" /></div>
<input type="button" value="Start Rest Timer" onclick="startTimer()" />
<div id="counter"></div>
<div>@Html.ActionLink("Graphs", "RepsBarGraph")</div>
<div>@Html.ActionLink("Graphs", "WeightBarGraph")</div>
<script>
	function startTimer() {
		var defaultTimer = 90, // Default amount of seconds if url variable is not found
			callback = function () {
				// Will be executed when the timer finishes
				alert("Time is up!");
			};

		var counter = 1, timer,
			match = document.location.href.match(/[\?|&]timer=(\d+)/i),
			totalTime = match ? match[1] : defaultTimer;
		var s;
		timer = setInterval(function () {
			if (totalTime != -1 && !isNaN(totalTime)) {
				val = 'Time left: ' + (function () {
					var m = Math.floor(totalTime / 60);
					if (m < 10) {
						return '0'.concat(m);
					}
					else {
						return m;
					}
				})() + ':' + (function () {
					s = totalTime % 60;
					if (s < 10) {
						return '0'.concat(s);
					}
					else {
						return s;
					}
				})();

				$('#counter').html(val);
				totalTime--;
			}
			else {
				window.clearInterval(timer);
				timer = null;
				callback();
			}
		}, 1000);
	}
</script>
